#!/usr/bin/env python
#
# Generate HAproxy configuration for each Mesos slave
# The script can be triggered by a cronjob.
#
# Author: Simone Roselli <simoneroselli78@gmail.com>
#

import requests
import json

apps_url    = 'http://<...>:8080/v2/apps'
mesos_dns   = 'http://<...>:8123/v1/hosts'
domain      = '.marathon.mesos'

# Header
header = """
# HAproxy conf updater for Mesos cluster
# This file is deployed via Puppet
#

global
  daemon
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn 4096
  tune.ssl.default-dh-param 2048

defaults
  log               global
  retries           3
  maxconn           2000
  timeout connect   5s
  timeout client    50s
  timeout server    50s
"""

# Web header
web_header = """
frontend web_ui
  bind *:80
  mode http
  """

# Spark header
spark_header = """
frontend spark_app
  bind *:4050
  mode tcp
  """

# Frontend
hp_frontend = """
  acl app_{0} hdr_sub(host) -i {0}
  use_backend {0} if app_{0}
  """

# Backend
hp_backend = """
backend {0}
  mode {4}
  balance roundrobin
  server {1}_{2} {3}:{2}
  """

# Get slave ip
def get_slave_ip(url):
    res      = requests.get(url=url)
    res_json = json.loads(res.text)
    slave_ip = res_json[0]['ip']

    return slave_ip

# Retrieve applications group
def get_apps_list(url, apps_group):
    res = requests.get(url=url + '?label=' + apps_group)
    res_json = json.loads(res.text)
    apps_list = []
    for app in res_json['apps']:
        for k, v in app.items():
            if k == 'id':
                apps_list.append(v)
        
    return apps_list

def get_apps_frontend(url, app):
    res = requests.get(url + app)
    res_json = json.loads(res.text)
    frontend = []

    for k, v in res_json['app'].items():
        if k == 'tasks':
            app_name = app.replace("/", "")
            frontend.extend([app_name])

    return frontend

def get_apps_backend(url, app, mode):
    res = requests.get(url + app)
    res_json = json.loads(res.text)
    backend = []

    for k, v in res_json['app'].items():
        if k == 'tasks':
            app_name = app.replace("/", "")
            app_port = v[0]['ports'][0]
            app_host = v[0]['host']
            app_ip   = get_slave_ip(mesos_dns + app + domain)
            mode     = mode
            backend.extend([app_name, app_host, app_port, app_ip, mode])

    return backend

def gen_conf(header, apps_url, group, mode):
    print header
    apps_list = get_apps_list(apps_url, group)
    for app in apps_list:
        frontend = get_apps_frontend(apps_url, app)
        print hp_frontend.format(*frontend)

    for app in apps_list:
        backend = get_apps_backend(apps_url, app, mode)
        print hp_backend.format(*backend)


if __name__ == '__main__':

    # Global Header
    print header

    # Web apps
    gen_conf(web_header, apps_url, 'web-ui', 'http')
    
    # Spark apps
    gen_conf(spark_header, apps_url, 'spark', 'tcp')
